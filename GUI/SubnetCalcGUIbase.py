#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.0b1 on Sat Dec 22 23:04:34 2018
#

import wx
import wx.adv

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
from .resources import *

# Copyright (C) 2018 Brandon M. Pace
#
# This file is part of Quick Subnet Calculator
#
# Quick Subnet Calculator is free software: you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Quick Subnet Calculator is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with Quick Subnet Calculator.
# If not, see <https://www.gnu.org/licenses/>.
# end wxGlade


class BaseCalculatorFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: BaseCalculatorFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.CLIP_CHILDREN | wx.STAY_ON_TOP | wx.TAB_TRAVERSAL
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_main = wx.Panel(self, wx.ID_ANY)
        self.checkbox_stay_on_top = wx.CheckBox(self.panel_main, wx.ID_ANY, "stay on top")
        self.bitmap_button_settings = wx.BitmapButton(self.panel_main, wx.ID_ANY, SettingsIcon.GetBitmap(), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
        self.bitmap_button_exit = wx.BitmapButton(self.panel_main, wx.ID_ANY, ExitIcon.GetBitmap(), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
        self.label_dotted = wx.StaticText(self.panel_main, wx.ID_ANY, "IP address:")
        self.text_ctrl_dotted = wx.TextCtrl(self.panel_main, wx.ID_ANY, "192.168.1.1")
        self.label_slash = wx.StaticText(self.panel_main, wx.ID_ANY, "/")
        self.spin_ctrl_mask = wx.SpinCtrl(self.panel_main, wx.ID_ANY, "24", min=0, max=32, style=wx.SP_ARROW_KEYS | wx.SP_WRAP)
        # Make the SpinCtrl only as wide as 2 characters
        spin_ctrl_new_size = self.spin_ctrl_mask.GetSizeFromTextSize(self.spin_ctrl_mask.GetTextExtent('00'))
        self.spin_ctrl_mask.SetMinSize(spin_ctrl_new_size)
        self.label_mask = wx.StaticText(self.panel_main, wx.ID_ANY, "Mask:")
        self.text_ctrl_mask = wx.TextCtrl(self.panel_main, wx.ID_ANY, "")
        self.slider_mask = wx.Slider(self.panel_main, wx.ID_ANY, 24, 0, 32, style=wx.SL_HORIZONTAL | wx.SL_MIN_MAX_LABELS)
        self.label_network = wx.StaticText(self.panel_main, wx.ID_ANY, "Network:")
        self.text_ctrl_network = wx.TextCtrl(self.panel_main, wx.ID_ANY, "", style=wx.BORDER_NONE | wx.TE_READONLY)
        self.label_broadcast = wx.StaticText(self.panel_main, wx.ID_ANY, "Broadcast:")
        self.text_ctrl_broadcast = wx.TextCtrl(self.panel_main, wx.ID_ANY, "", style=wx.BORDER_NONE | wx.TE_READONLY)
        self.label_first_addr = wx.StaticText(self.panel_main, wx.ID_ANY, "First addr:")
        self.text_ctrl_first_addr = wx.TextCtrl(self.panel_main, wx.ID_ANY, "", style=wx.BORDER_NONE | wx.TE_READONLY)
        self.label_last_addr = wx.StaticText(self.panel_main, wx.ID_ANY, "Last addr:")
        self.text_ctrl_last_addr = wx.TextCtrl(self.panel_main, wx.ID_ANY, "", style=wx.BORDER_NONE | wx.TE_READONLY)
        self.label_usable = wx.StaticText(self.panel_main, wx.ID_ANY, "Usable IPs:")
        self.text_ctrl_usable = wx.TextCtrl(self.panel_main, wx.ID_ANY, "", style=wx.BORDER_NONE | wx.TE_READONLY)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_CHECKBOX, self.on_checkbox_stay_on_top, self.checkbox_stay_on_top)
        self.Bind(wx.EVT_BUTTON, self.on_button_settings, self.bitmap_button_settings)
        self.Bind(wx.EVT_BUTTON, self.on_button_exit, self.bitmap_button_exit)
        self.Bind(wx.EVT_SPINCTRL, self.on_spinctrl, self.spin_ctrl_mask)
        self.Bind(wx.EVT_SLIDER, self.on_slider, self.slider_mask)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: BaseCalculatorFrame.__set_properties
        self.SetTitle("Quick Subnet Calculator")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(SubnetCalcIcon.GetBitmap())
        self.SetIcon(_icon)
        self.checkbox_stay_on_top.SetValue(1)
        self.bitmap_button_settings.SetBackgroundColour(wx.Colour(238, 238, 238))
        self.bitmap_button_settings.SetToolTip("Settings")
        self.bitmap_button_settings.SetSize(self.bitmap_button_settings.GetBestSize())
        self.bitmap_button_exit.SetBackgroundColour(wx.Colour(238, 238, 238))
        self.bitmap_button_exit.SetToolTip("Exit")
        self.bitmap_button_exit.SetSize(self.bitmap_button_exit.GetBestSize())
        self.label_dotted.SetBackgroundColour(wx.Colour(238, 238, 238))
        self.label_dotted.SetForegroundColour(wx.Colour(0, 0, 0))
        self.text_ctrl_dotted.SetBackgroundColour(wx.Colour(255, 255, 255))
        self.text_ctrl_dotted.SetForegroundColour(wx.Colour(0, 0, 0))
        self.text_ctrl_dotted.SetToolTip("Dotted-quad IPv4 (e.g. 192.168.1.1)")
        self.text_ctrl_dotted.SetFocus()
        self.label_slash.SetBackgroundColour(wx.Colour(238, 238, 238))
        self.label_slash.SetForegroundColour(wx.Colour(0, 0, 0))
        self.spin_ctrl_mask.SetBackgroundColour(wx.Colour(255, 255, 255))
        self.spin_ctrl_mask.SetForegroundColour(wx.Colour(0, 0, 0))
        self.label_mask.SetBackgroundColour(wx.Colour(238, 238, 238))
        self.label_mask.SetForegroundColour(wx.Colour(0, 0, 0))
        self.text_ctrl_mask.SetBackgroundColour(wx.Colour(255, 255, 255))
        self.text_ctrl_mask.SetForegroundColour(wx.Colour(0, 0, 0))
        self.text_ctrl_mask.SetToolTip("Dotted-quad IPv4 subnet mask (e.g. 255.255.255.0)")
        self.slider_mask.SetBackgroundColour(wx.Colour(238, 238, 238))
        self.slider_mask.SetForegroundColour(wx.Colour(0, 0, 0))
        self.label_network.SetBackgroundColour(wx.Colour(238, 238, 238))
        self.label_network.SetForegroundColour(wx.Colour(0, 0, 0))
        self.text_ctrl_network.SetBackgroundColour(wx.Colour(238, 238, 238))
        self.text_ctrl_network.SetForegroundColour(wx.Colour(0, 0, 0))
        self.label_broadcast.SetBackgroundColour(wx.Colour(238, 238, 238))
        self.label_broadcast.SetForegroundColour(wx.Colour(0, 0, 0))
        self.text_ctrl_broadcast.SetBackgroundColour(wx.Colour(238, 238, 238))
        self.text_ctrl_broadcast.SetForegroundColour(wx.Colour(0, 0, 0))
        self.label_first_addr.SetBackgroundColour(wx.Colour(238, 238, 238))
        self.label_first_addr.SetForegroundColour(wx.Colour(0, 0, 0))
        self.text_ctrl_first_addr.SetBackgroundColour(wx.Colour(238, 238, 238))
        self.text_ctrl_first_addr.SetForegroundColour(wx.Colour(0, 0, 0))
        self.label_last_addr.SetBackgroundColour(wx.Colour(238, 238, 238))
        self.label_last_addr.SetForegroundColour(wx.Colour(0, 0, 0))
        self.text_ctrl_last_addr.SetBackgroundColour(wx.Colour(238, 238, 238))
        self.text_ctrl_last_addr.SetForegroundColour(wx.Colour(0, 0, 0))
        self.label_usable.SetBackgroundColour(wx.Colour(238, 238, 238))
        self.label_usable.SetForegroundColour(wx.Colour(0, 0, 0))
        self.text_ctrl_usable.SetBackgroundColour(wx.Colour(238, 238, 238))
        self.text_ctrl_usable.SetForegroundColour(wx.Colour(0, 0, 0))
        self.panel_main.SetBackgroundColour(wx.Colour(238, 238, 238))
        self.panel_main.SetForegroundColour(wx.Colour(0, 0, 0))
        self.panel_main.SetToolTip("Click and drag to move the window")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: BaseCalculatorFrame.__do_layout
        sizer_main_outer = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_main = wx.GridBagSizer(0, 0)
        self.sizer_input = wx.GridBagSizer(0, 0)
        sizer_buttons = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_main.Add(self.checkbox_stay_on_top, (0, 0), (1, 1), wx.ALIGN_CENTER_VERTICAL | wx.BOTTOM | wx.LEFT, 3)
        sizer_buttons.Add(self.bitmap_button_settings, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.TOP, 2)
        sizer_buttons.Add(self.bitmap_button_exit, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.LEFT | wx.RIGHT | wx.TOP, 2)
        grid_sizer_main.Add(sizer_buttons, (0, 3), (1, 1), wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.BOTTOM, 3)
        self.sizer_input.Add(self.label_dotted, (0, 0), (1, 1), wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 2)
        self.sizer_input.Add(self.text_ctrl_dotted, (0, 1), (1, 1), wx.EXPAND, 0)
        self.sizer_input.Add(self.label_slash, (0, 2), (1, 1), wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 1)
        self.sizer_input.Add(self.spin_ctrl_mask, (0, 3), (1, 1), wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.EXPAND, 0)
        self.sizer_input.Add(self.label_mask, (1, 0), (1, 1), wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 2)
        self.sizer_input.Add(self.text_ctrl_mask, (1, 1), (1, 1), wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)
        self.sizer_input.Add(self.slider_mask, (2, 0), (1, 4), wx.ALIGN_CENTER_VERTICAL | wx.EXPAND | wx.LEFT | wx.RIGHT, 2)
        self.sizer_input.AddGrowableCol(1)
        self.sizer_input.AddGrowableCol(3)
        grid_sizer_main.Add(self.sizer_input, (1, 0), (1, 4), wx.EXPAND, 0)
        grid_sizer_main.Add(self.label_network, (2, 0), (1, 1), wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 2)
        grid_sizer_main.Add(self.text_ctrl_network, (2, 1), (1, 2), wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)
        grid_sizer_main.Add(self.label_broadcast, (3, 0), (1, 1), wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 2)
        grid_sizer_main.Add(self.text_ctrl_broadcast, (3, 1), (1, 2), wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)
        grid_sizer_main.Add(self.label_first_addr, (4, 0), (1, 1), wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 2)
        grid_sizer_main.Add(self.text_ctrl_first_addr, (4, 1), (1, 2), wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)
        grid_sizer_main.Add(self.label_last_addr, (5, 0), (1, 1), wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 2)
        grid_sizer_main.Add(self.text_ctrl_last_addr, (5, 1), (1, 2), wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)
        grid_sizer_main.Add(self.label_usable, (6, 0), (1, 1), wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 2)
        grid_sizer_main.Add(self.text_ctrl_usable, (6, 1), (1, 2), wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)
        self.panel_main.SetSizer(grid_sizer_main)
        grid_sizer_main.AddGrowableCol(1)
        sizer_main_outer.Add(self.panel_main, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_main_outer)
        sizer_main_outer.Fit(self)
        self.Layout()
        # end wxGlade

    def on_checkbox_stay_on_top(self, event):  # wxGlade: BaseCalculatorFrame.<event_handler>
        print("Event handler 'on_checkbox_stay_on_top' not implemented!")
        event.Skip()

    def on_button_settings(self, event):  # wxGlade: BaseCalculatorFrame.<event_handler>
        print("Event handler 'on_button_settings' not implemented!")
        event.Skip()

    def on_button_exit(self, event):  # wxGlade: BaseCalculatorFrame.<event_handler>
        print("Event handler 'on_button_exit' not implemented!")
        event.Skip()

    def on_spinctrl(self, event):  # wxGlade: BaseCalculatorFrame.<event_handler>
        print("Event handler 'on_spinctrl' not implemented!")
        event.Skip()

    def on_slider(self, event):  # wxGlade: BaseCalculatorFrame.<event_handler>
        print("Event handler 'on_slider' not implemented!")
        event.Skip()

# end of class BaseCalculatorFrame

class BaseSettingsFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: BaseSettingsFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.CAPTION | wx.CLIP_CHILDREN | wx.CLOSE_BOX | wx.FRAME_FLOAT_ON_PARENT | wx.FRAME_TOOL_WINDOW | wx.MAXIMIZE_BOX | wx.MINIMIZE_BOX | wx.SYSTEM_MENU | wx.TAB_TRAVERSAL
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_settings = wx.Panel(self, wx.ID_ANY)
        self.radio_box_theme = wx.RadioBox(self.panel_settings, wx.ID_ANY, "theme", choices=["dark", "light"], majorDimension=0, style=wx.RA_SPECIFY_ROWS)
        self.hyperlink_about = wx.adv.HyperlinkCtrl(self.panel_settings, wx.ID_ANY, "About this program", "", style=wx.adv.HL_ALIGN_CENTRE)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_RADIOBOX, self.on_radiobox_theme, self.radio_box_theme)
        self.Bind(wx.adv.EVT_HYPERLINK, self.on_about, self.hyperlink_about)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: BaseSettingsFrame.__set_properties
        self.SetTitle("Settings")
        self.radio_box_theme.SetSelection(1)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: BaseSettingsFrame.__do_layout
        sizer_main = wx.BoxSizer(wx.VERTICAL)
        sizer_panel = wx.BoxSizer(wx.VERTICAL)
        sizer_panel.Add(self.radio_box_theme, 0, wx.ALIGN_CENTER | wx.ALL | wx.EXPAND, 2)
        sizer_panel.Add(self.hyperlink_about, 0, wx.ALIGN_CENTER | wx.ALL, 2)
        self.panel_settings.SetSizer(sizer_panel)
        sizer_main.Add(self.panel_settings, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_main)
        sizer_main.Fit(self)
        self.Layout()
        # end wxGlade

    def on_radiobox_theme(self, event):  # wxGlade: BaseSettingsFrame.<event_handler>
        print("Event handler 'on_radiobox_theme' not implemented!")
        event.Skip()

    def on_about(self, event):  # wxGlade: BaseSettingsFrame.<event_handler>
        print("Event handler 'on_about' not implemented!")
        event.Skip()

# end of class BaseSettingsFrame

class BaseSubnetCalcApp(wx.App):
    def OnInit(self):
        self.frame_main = BaseCalculatorFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame_main)
        self.frame_main.Show()
        return True

# end of class BaseSubnetCalcApp

if __name__ == "__main__":
    app = BaseSubnetCalcApp(0)
    app.MainLoop()
